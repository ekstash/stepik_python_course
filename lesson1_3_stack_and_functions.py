# стек вызовов - список, составляемый интерпретатором, в котором выполняются функции по очереди

x = [1, 2, 3]
top = x.pop()  # забираем последний элемент. top=3, x = [1,2]


def printab(a, b):
    print(a)
    print(b)


lst = [1, 2]
printab(*lst)  # передает в качестве a,b элементы списка lst

args = {'a': 10, 'b': 20}
print(**args)  # printab(a=10,b=20)


# если мы хотим при создании функции задать аргументы по умолчанию, мы должны задавать их после
# неопределенных аргументов. def func(a=10, b) - некорректен.

def printall(*args):  # принимает любое количество значений кортежем. если до этого стоят позиционные аргументы,
    # в кортеж попадают все последующие значения
    for arg in args:
        print(arg)


def printargs(a, **args):  # значения попадают парами?
    print(a)
    for x in args:
        print(x, args[x])


printargs(3, b=49, n=59)


def function(a, b=10, *args, c=10, d, **kwargs):  # сначала позиционные, потом позиционные инициализированные,
    # потом кортеж, потом позиционные именованные, потом словарь
    print(a, b, c, d)


function(5, d=67)
